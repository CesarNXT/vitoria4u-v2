import { NextResponse } from 'next/server';
import { adminDb } from '@/lib/firebase-admin';
import type { ConfiguracoesNegocio } from '@/lib/types';
import { isPast, differenceInDays, startOfDay } from 'date-fns';
import { WhatsAppAPIClient } from '@/lib/whatsapp-api';

// üì± Configura√ß√µes da Vitoria4U para enviar notifica√ß√µes
const VITORIA_PHONE = '5581995207521'; // N√∫mero da Vitoria
const VITORIA_TOKEN = 'b2e97825-2d28-4646-ae38-3357fcbf0e20'; // Token fixo da Vitoria4U
const API_BASE = process.env.NEXT_PUBLIC_WHATSAPP_API_URL || 'https://vitoria4u.uazapi.com';

// üí¨ Mensagens de remarketing por dias restantes
const EXPIRATION_MESSAGES = {
  3: (businessName: string, planName: string) => 
    `‚ö†Ô∏è *Aten√ß√£o ${businessName}!*\n\n` +
    `Seu plano *${planName}* expira em *3 dias*!\n\n` +
    `üìÖ N√£o perca o acesso a:\n` +
    `‚úÖ Lembretes autom√°ticos 24h e 2h\n` +
    `‚úÖ Notifica√ß√µes de anivers√°rio\n` +
    `‚úÖ Feedback automatizado\n` +
    `‚úÖ Intelig√™ncia Artificial\n\n` +
    `üí≥ *Renove agora e mantenha suas automa√ß√µes ativas!*\n\n` +
    `Acesse: https://vitoria4u.com.br/planos`,
  
  2: (businessName: string, planName: string) =>
    `‚è∞ *${businessName}, faltam apenas 2 dias!*\n\n` +
    `Seu plano *${planName}* est√° prestes a expirar.\n\n` +
    `‚ùå Ap√≥s a expira√ß√£o voc√™ perder√°:\n` +
    `‚Ä¢ Todas as automa√ß√µes de WhatsApp\n` +
    `‚Ä¢ Conex√£o com sua inst√¢ncia\n` +
    `‚Ä¢ Lembretes de agendamentos\n` +
    `‚Ä¢ Hist√≥rico de campanhas\n\n` +
    `üíé *Renove hoje e evite interrup√ß√µes!*\n\n` +
    `Acesse: https://vitoria4u.com.br/planos`,
  
  1: (businessName: string, planName: string) =>
    `üö® *√öLTIMO DIA, ${businessName}!*\n\n` +
    `Seu plano *${planName}* expira *HOJE*!\n\n` +
    `‚ö†Ô∏è A partir de amanh√£:\n` +
    `‚ùå Sua inst√¢ncia WhatsApp ser√° desconectada\n` +
    `‚ùå Todas as automa√ß√µes ser√£o desativadas\n` +
    `‚ùå Lembretes n√£o ser√£o mais enviados\n\n` +
    `üí≥ *Esta √© sua √∫ltima chance de renovar sem perder nada!*\n\n` +
    `Acesse AGORA: https://vitoria4u.com.br/planos`,
  
  0: (businessName: string, planName: string) =>
    `üòî *${businessName}, seu plano expirou*\n\n` +
    `Infelizmente seu plano *${planName}* expirou hoje.\n\n` +
    `üìã O que aconteceu:\n` +
    `‚úÖ Voc√™ foi migrado para o Plano Gratuito\n` +
    `‚úÖ Sua inst√¢ncia WhatsApp foi desconectada\n` +
    `‚úÖ Todas as automa√ß√µes foram desativadas\n\n` +
    `üí° *Quer reativar seus recursos?*\n` +
    `Renove seu plano e recupere tudo instantaneamente!\n\n` +
    `üéØ *OFERTA ESPECIAL DE REATIVA√á√ÉO:*\n` +
    `Renove agora e volte a ter:\n` +
    `‚Ä¢ Automa√ß√µes de WhatsApp\n` +
    `‚Ä¢ Lembretes inteligentes\n` +
    `‚Ä¢ IA para atendimento\n` +
    `‚Ä¢ Gest√£o completa de agendamentos\n\n` +
    `Acesse agora: https://vitoria4u.com.br/planos`
};

// üîî Fun√ß√£o para enviar notifica√ß√£o via WhatsApp
async function sendExpirationNotification(
  businessPhone: number,
  businessName: string,
  planName: string,
  daysLeft: number
): Promise<boolean> {
  try {
    if (!VITORIA_TOKEN) {
      console.warn('‚ö†Ô∏è [NOTIFICATION] Token da Vitoria n√£o configurado');
      return false;
    }

    const message = EXPIRATION_MESSAGES[daysLeft as keyof typeof EXPIRATION_MESSAGES];
    if (!message) return false;

    const phoneFormatted = businessPhone.toString().replace(/\D/g, '');
    const messageText = message(businessName, planName);

    console.log(`üì± [NOTIFICATION] Enviando notifica√ß√£o de ${daysLeft} dias para ${businessName}`);

    const response = await fetch(`${API_BASE}/send/text`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'token': VITORIA_TOKEN
      },
      body: JSON.stringify({
        number: phoneFormatted,
        text: messageText
      })
    });

    if (response.ok) {
      console.log(`‚úÖ [NOTIFICATION] Notifica√ß√£o enviada com sucesso para ${businessName}`);
      return true;
    } else {
      const errorText = await response.text().catch(() => 'Erro desconhecido');
      console.warn(`‚ö†Ô∏è [NOTIFICATION] Falha ao enviar para ${businessName}: ${response.status} - ${errorText}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå [NOTIFICATION] Erro ao enviar notifica√ß√£o:`, error);
    return false;
  }
}

function toDate(value: any): Date | null {
    if (!value) return null;
    if (value.toDate) return value.toDate();
    if (typeof value === 'string' || typeof value === 'number') {
        const d = new Date(value);
        if (!isNaN(d.getTime())) return d;
    }
    return null;
}

export async function GET(request: Request) {
  console.log('üîÑ [CHECK-EXPIRATIONS] ========================================');
  console.log('üîÑ [CHECK-EXPIRATIONS] Iniciando verifica√ß√£o de planos expirados');
  console.log('üîÑ [CHECK-EXPIRATIONS] Data/Hora:', new Date().toISOString());
  
  const authToken = (request.headers.get('authorization') || '').split('Bearer ')[1];

  if (authToken !== process.env.CRON_SECRET) {
    console.log('‚ùå [CHECK-EXPIRATIONS] Autentica√ß√£o falhou - Token inv√°lido');
    return new Response('Unauthorized', { status: 401 });
  }

  console.log('‚úÖ [CHECK-EXPIRATIONS] Autentica√ß√£o bem-sucedida');

  try {
    const now = new Date();
    console.log('üìÖ [CHECK-EXPIRATIONS] Verificando planos com data < ', now.toISOString());
    console.log('üìÖ [CHECK-EXPIRATIONS] Timestamp atual:', now.getTime());
    
    // Buscar TODOS os neg√≥cios (n√£o apenas != plano_gratis)
    const businessesSnapshot = await adminDb.collection('negocios').get();
    
    console.log(`üìä [CHECK-EXPIRATIONS] Total de neg√≥cios no banco: ${businessesSnapshot.size}`);
    
    // Filtrar manualmente os que n√£o s√£o plano_gratis
    const paidBusinesses = businessesSnapshot.docs.filter(doc => {
      const data = doc.data();
      return data.planId && data.planId !== 'plano_gratis';
    });
    
    console.log(`üìä [CHECK-EXPIRATIONS] Neg√≥cios com planos pagos: ${paidBusinesses.length}`);
    
    let updatedCount = 0;
    const totalReads = businessesSnapshot.size;

    const BATCH_SIZE = 30;
    const businesses = paidBusinesses; // Usar apenas neg√≥cios com planos pagos
    
    console.log(`üîÑ [CHECK-EXPIRATIONS] Processando ${businesses.length} neg√≥cios em batches de ${BATCH_SIZE}...`);
    
    if (businesses.length === 0) {
      console.log('‚è≠Ô∏è [CHECK-EXPIRATIONS] Nenhum neg√≥cio com plano pago encontrado');
    }
    
    for (let i = 0; i < businesses.length; i += BATCH_SIZE) {
      const batch = businesses.slice(i, i + BATCH_SIZE);
      console.log(`üì¶ [CHECK-EXPIRATIONS] Processando batch ${Math.floor(i / BATCH_SIZE) + 1}/${Math.ceil(businesses.length / BATCH_SIZE)} (${batch.length} neg√≥cios)`);
      
      await Promise.all(batch.map(async (businessDoc) => {
        const business = businessDoc.data() as ConfiguracoesNegocio;
        const businessId = businessDoc.id;
        const businessName = business.nome || 'Sem nome';

        if (business.planId === 'plano_gratis') {
          return;
        }
        
        const expirationDate = toDate(business.access_expires_at);
        
        if (!expirationDate) {
          console.log(`‚ö†Ô∏è [CHECK-EXPIRATIONS] ${businessName}: Sem data de expira√ß√£o v√°lida`);
          return;
        }

        // Normalizar datas para in√≠cio do dia (00:00:00) para c√°lculo preciso
        const todayStart = startOfDay(now);
        const expirationStart = startOfDay(expirationDate);
        
        const daysLeft = differenceInDays(expirationStart, todayStart);
        const isExpired = isPast(expirationDate);

        // üîî SISTEMA DE NOTIFICA√á√ïES (3, 2, 1 dias antes + dia da expira√ß√£o)
        if (!isExpired && (daysLeft === 3 || daysLeft === 2 || daysLeft === 1)) {
          // Verificar se j√° notificou hoje
          const lastNotification = (business as any).last_expiration_notification;
          const lastNotificationDate = lastNotification ? toDate(lastNotification) : null;
          const alreadyNotifiedToday = lastNotificationDate && 
            differenceInDays(now, lastNotificationDate) === 0;
          
          if (!alreadyNotifiedToday) {
            const planName = business.planId === 'plano_mensal' ? 'Plano Mensal' :
                           business.planId === 'plano_anual' ? 'Plano Anual' :
                           business.planId === 'plano_premium' ? 'Premium' :
                           business.planId === 'premium' ? 'Premium' : business.planId;
            
            const notificationSent = await sendExpirationNotification(
              business.telefone,
              business.nome,
              planName,
              daysLeft
            );
            
            if (notificationSent) {
              await businessDoc.ref.update({
                last_expiration_notification: now
              });
            }
          }
          
          return;
        }
        
        if (!isExpired) {
          return;
        }
        
        // PLANO EXPIRADO - Fazer downgrade
        console.log(`‚ö†Ô∏è [CHECK-EXPIRATIONS] ${businessName}: Plano expirado, iniciando downgrade...`);
        
        try {
          // Deletar inst√¢ncia WhatsApp se estiver conectada
          if (business.whatsappConectado && business.tokenInstancia) {
            try {
              const client = new WhatsAppAPIClient(businessId, business.tokenInstancia);
              await client.deleteInstance();
            } catch (error) {
              console.error(`‚ùå [CHECK-EXPIRATIONS] Erro ao deletar inst√¢ncia WhatsApp de ${businessName}:`, error);
            }
          }

          // Enviar notifica√ß√£o de expira√ß√£o
          const planName = business.planId === 'plano_mensal' ? 'Plano Mensal' :
                         business.planId === 'plano_anual' ? 'Plano Anual' :
                         business.planId === 'plano_premium' ? 'Premium' :
                         business.planId === 'premium' ? 'Premium' : business.planId;
          
          await sendExpirationNotification(
            business.telefone,
            business.nome,
            planName,
            0
          );

          // Atualizar para plano gratuito
          const businessDocRef = adminDb.collection('negocios').doc(businessId);
          await businessDocRef.update({
            planId: 'plano_gratis',
            whatsappConectado: false,
            tokenInstancia: null,
            habilitarLembrete24h: false,
            habilitarLembrete2h: false,
            habilitarFeedback: false,
            habilitarAniversario: false,
            iaAtiva: false,
            last_expiration_notification: now,
          });
          
          console.log(`‚úÖ [CHECK-EXPIRATIONS] ${businessName}: Downgrade conclu√≠do ‚Üí plano_gratis`);
          updatedCount++;
        } catch (error) {
          console.error(`‚ùå [CHECK-EXPIRATIONS] Erro ao processar ${businessName}:`, error);
        }
      }));
    }
    
    console.log('üéØ [CHECK-EXPIRATIONS] ========================================');
    console.log('üìä [CHECK-EXPIRATIONS] RESUMO FINAL:');
    console.log(`   ‚îú‚îÄ Total no banco: ${businessesSnapshot.size} neg√≥cios`);
    console.log(`   ‚îú‚îÄ Com planos pagos: ${paidBusinesses.length} neg√≥cios`);
    console.log(`   ‚îú‚îÄ Planos expirados: ${updatedCount}`);
    console.log(`   ‚îú‚îÄ Firestore reads: ${totalReads}`);
    console.log(`   ‚îî‚îÄ Status: ${updatedCount > 0 ? '‚úÖ Downgrades realizados' : '‚úÖ Nenhum plano expirado'}`);
    console.log('üéØ [CHECK-EXPIRATIONS] Verifica√ß√£o conclu√≠da com sucesso!');
    console.log('üîÑ [CHECK-EXPIRATIONS] ========================================');
    
    return NextResponse.json({ 
      success: true,
      message: `Verifica√ß√£o conclu√≠da. ${updatedCount} planos expirados detectados e atualizados.`,
      totalBusinesses: businessesSnapshot.size,
      paidBusinesses: paidBusinesses.length,
      updatedBusinesses: updatedCount,
      totalReads,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå [CHECK-EXPIRATIONS] ERRO CR√çTICO:', error);
    console.error('‚ùå [CHECK-EXPIRATIONS] Stack trace:', error);
    return NextResponse.json({ 
      success: false,
      error: 'Internal Server Error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
